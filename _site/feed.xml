<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>김대성 블로그</title>
    <description>개발하면서 삽질했던것들 메모용</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 17 Jun 2019 21:12:55 +0900</pubDate>
    <lastBuildDate>Mon, 17 Jun 2019 21:12:55 +0900</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>처음배우는 스프링부트2 책을 읽고 요점정리</title>
        <description>&lt;h2 id=&quot;처음배우는-스프링부트2-책을-읽고-요점정리&quot;&gt;처음배우는 스프링부트2 책을 읽고 요점정리&lt;/h2&gt;

&lt;p&gt;스프링부트 프로젝트 의존성&lt;/p&gt;

&lt;p&gt;https://github.com/spring-projects/spring-boot&lt;/p&gt;

&lt;p&gt;application-{profile}.yml {profile}에 원하는 프로파일값으로 YAML 파일을 추가하면&lt;/p&gt;

&lt;p&gt;애플리케이션 실행시 지정한 프로파일값을 바탕으로 실행&lt;/p&gt;

&lt;p&gt;서버에서 실행시&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -jar ... -D spring.profiles.active=dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;yaml-파일-매핑&quot;&gt;YAML 파일 매핑&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;유연한 바인딩: 프로퍼티값을 객체에 바인딩할 경우 필드를 낙타 표기법(Camel Case)으로 선언 프로퍼티의 키는 다양한 형식(낙타 표기법,케밥 표기법(Kebab Case),언더바 표기법(Underscore) 선언 바인딩&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;메타데이터 지원: 프로터피 키에 대한 정보를 메타데이터 파일(Json) 로 제공&lt;/li&gt;
  &lt;li&gt;SpEL(Spring Expression Language,스프링 표현 언어) 평가: SpEL은 런타임에 객체 참조에 대해 질의하고 조작하는 기능을 지원하는 언어, 특히 메서드 호출 및 기본 문자열 템플릿기능을 제공. @Value만 사용 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;스프링-부트-테스트&quot;&gt;스프링 부트 테스트&lt;/h1&gt;

&lt;h2 id=&quot;datajpatest&quot;&gt;@DataJpaTest&lt;/h2&gt;

&lt;p&gt;JPA 관련 테스트 설정만 로드&lt;/p&gt;

&lt;p&gt;기본적으로 인메모리 임베디드 데이터베이스를 사용&lt;/p&gt;

&lt;p&gt;데이터 소스주입&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.junit.runner.RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.junit4.SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.test.context.ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@DataJpaTest&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ActiveProfiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@AutoConfigureTestDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AutoConfigureTestDatabase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NONE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JpaTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;@AutoConfigureTestDatabase 어노테이션의 기본 설정값인 Replace.Any를 사용하면 기본적으로 내장된 데이터소스를 사용함 , Replace.NONE으로 설정하면 @ActiveProfiles에 설정한 프로파일 환경값에 따라 데이터소스가 적용됨&lt;/li&gt;
  &lt;li&gt;JPA 테스트가 끝날때마다 자동으로 테스트에 사용한 데이터를 롤백&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;restclienttest&quot;&gt;@RestClientTest&lt;/h1&gt;

&lt;p&gt;REST 관련 테스트를 도와주는 어노테이션&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SpringRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RestClientTest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BookRestService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BookRestTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Rule&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpectedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thrown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExpectedException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BookRestService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookRestService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockRestServiceServer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;테스트&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    	
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/rest/test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRespond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withSuccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassPathResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/test.json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;Book&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookRestService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;테스트&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rest_error_&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;테스트&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    		
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/rest/test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andRespond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withServerError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thrown&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpServerErrorException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bookRestService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getRestBook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;@RestClientTest 는 테스트 대상이 되는 빈을 주입받음&lt;/li&gt;
  &lt;li&gt;@Rule로 지정한 필드값은 @Before나 @After 어노테이션에 상관없이 하나의 테스트 메서드가 끝날때 마다 정의한 값으로 초기화 시켜줌&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jsontest&quot;&gt;@JsonTest&lt;/h2&gt;

&lt;p&gt;@JsonTest 어노테이션은 JSON의 직렬화(serialization)와 역직렬화(deserialization)을 수행하는 라이브러리인 Gson과 Jackson API의 테스트를 제공함&lt;/p&gt;

&lt;h2 id=&quot;4장-스프링-부트-웹&quot;&gt;4장 스프링 부트 웹&lt;/h2&gt;

&lt;p&gt;스프링이 관리하는 컴포넌트에서 퍼시스턴스 계층에 대해 더 명확하게 특수한 제네릭 스테레오타입을 말함&lt;/p&gt;

&lt;p&gt;퍼시스턴스 계층이란 물리적 저장공간을 뜻함.영속성을 가진 파일이나 DB에 로직을 구현하는 것을 뜻하기도함.&lt;/p&gt;

&lt;p&gt;JPA fetch eager와 lazy 두종류가 있음 eager는 도메인을 조회할때 즉시 관련된 객체도 같이 조회&lt;/p&gt;

&lt;p&gt;lazy는 객체가 실제로 사용될때 조회됨&lt;/p&gt;

&lt;h2 id=&quot;commandlinerunner를-사용하여-db에-데이터-넣기&quot;&gt;CommandLineRunner를 사용하여 DB에 데이터 넣기&lt;/h2&gt;

&lt;p&gt;CommandLineRunner는 애플리케이션 구동 후 특정 코드를 실행시키고 싶을 때 직접 구현하는 인터페이스&lt;/p&gt;

&lt;p&gt;애플리케이션 구동시 테스트 데이터를 함께 생성하여 데모 프로젝트를 실행/테스트하고 싶을때 편리함&lt;/p&gt;

&lt;p&gt;스프링 DI(Dependency Injection) 스프링의 주요 특성 중 하나로 주로 의존 관계 주입&lt;/p&gt;

&lt;p&gt;의존 관계를 주입하는게 아니라 단지 객체의 레퍼런스를 전달하여 참조시킨다는 의미로 의존 관계 설정이라고 함&lt;/p&gt;

&lt;h2 id=&quot;5장-스프링-부트-시큐리티--oauth2&quot;&gt;5장 스프링 부트 시큐리티 + OAuth2&lt;/h2&gt;

&lt;p&gt;스프링 부트 시큐리티에서 가장 중요한 개념은 ‘인증(authentication)’ 과 ‘권한부여(authorization)’&lt;/p&gt;

&lt;p&gt;@NestedConfigurationProperty&lt;/p&gt;

&lt;p&gt;@EnableWebSecurity 어노테이션은 웹에서 시큐리티 기능 사용하겠다는 어노테이션&lt;/p&gt;

&lt;p&gt;스프링부트는 @EnableWebSecurity 자동 설정이 적용됨&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableWebSecurity&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SecurityConfig&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebSecurityConfigurerAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CharacterEncodingFilter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CharacterEncodingFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    	
    &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//인증 메커니즘 요청 HttpServletRequest 기반으로 설정&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;antMatchers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/login/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/css/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/images/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/js/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 요청 패턴을 리스트 형식으로 설정 &lt;/span&gt;
    	    &lt;span class=&quot;s&quot;&gt;&quot;/console/**&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permitAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//설정한 리퀘스트 패턴 누구나 접근 허용 &lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 설정한 요청 이외의 리퀘스트 요청을 표현 &lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 해당 요청은 인증된 사용자만 할수 있음 &lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 응답에 해당하는 header 설정 &lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;frameOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// XFrameOptionsHeaderWriter 최적화 설정을 허용안함 &lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exceptionHandling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authenticationEntryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoginUrlAuthenticationEntryPoint&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    		  &lt;span class=&quot;s&quot;&gt;&quot;/login&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//인증의 진입 지점 인증되지 않은 사용자가 허용되지 않은 경로로 리퀘스트 요청하면 /login으로 이동 &lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;successForwardUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/board/list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 로그인에 성공하면 설정된 경로로 포워딩 &lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logoutUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/logout&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logoutSuccessUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteCookies&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;JSESSIONID&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 로그아웃시에 쿠키 값 삭제 &lt;/span&gt;
    		&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invalidateHttpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 세션무효화 &lt;/span&gt;
    	&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    	  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFilterBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CsrfFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//첫번째 인자보다 먼저 시작될 필터를 등록 &lt;/span&gt;
    		  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;csrf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; 
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그레이들에서 의존성 관리 제어를 위한 플러그인&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apply plugin: 'io.spring.dependency-management'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 10 Jun 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2019/06/10/springboot2-summary.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2019/06/10/springboot2-summary.html</guid>
        
        <category>dev</category>
        
        <category>java</category>
        
        <category>springboot2</category>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>그레이들 래퍼</title>
        <description>&lt;h2 id=&quot;그레이들-래퍼&quot;&gt;그레이들 래퍼?&lt;/h2&gt;

&lt;h1 id=&quot;그레이들-래퍼-설정방법&quot;&gt;그레이들 래퍼 설정방법&lt;/h1&gt;

&lt;p&gt;그레이들 설정 관련 기본 구조&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2019/03/10/2019-03-10-gradle-wrapper-01.jpeg&quot; alt=&quot;GRADLE-WRAPPER1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;설정-파일-용도&quot;&gt;설정 파일 용도&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;gradlew : 리눅스 및 맥 OS용 셀 스크립트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gradlew.bat : 윈도우용 배치 스크립트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gradle/wrapper/gradle-wrapper.jar : Wrapper JAR&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gradle/wrapper/gradle-wrapper.properties : 그레이들 설정 정보 프로퍼티 파일(버전 정보)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;그레이들-버전-올리는-방법&quot;&gt;그레이들 버전 올리는 방법&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$./gradle wrapper --gradle-version 4.8.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2019/03/10/2019-03-10-gradle-wrapper-02.jpeg&quot; alt=&quot;GRADLE-WRAPPER2&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 10 Mar 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev/2019/03/10/gradle-wrapper.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev/2019/03/10/gradle-wrapper.html</guid>
        
        <category>dev</category>
        
        <category>java</category>
        
        <category>gradle</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>mybatis muliti update 하려면!</title>
        <description>&lt;p&gt;mybatis muliti update 하려면~!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;update id=&quot;Mapper메서드명&quot; parameterType=&quot;java.util.List&quot;&amp;gt;
   &amp;lt;foreach item=&quot;temp&quot; index=&quot;index&quot; collection=&quot;list&quot; open=&quot;&quot; close=&quot;&quot; separator=&quot;;&quot;&amp;gt;
      UPDATE 테이블
      SET 컬럼 = #{temp.test1}
      WHERE 컬럼 = #{temp.test2}
   &amp;lt;/foreach&amp;gt;
&amp;lt;/update&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx start

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;application.yml에서&lt;/p&gt;

&lt;p&gt;jdbc.allowMultiQueries=true&lt;/p&gt;

&lt;p&gt;되어 있어야 멀티업데이트가 된다.&lt;/p&gt;

&lt;p&gt;요즘엔 JPA로 하고 있어서 잘안쓰지만 예전에 한참 Mybatis를 이용해서 플젝했을때는 종종쓴거 같다~&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/dev/2018/12/19/mybatis-muliti-update.html</link>
        <guid isPermaLink="true">http://localhost:4000/dev/2018/12/19/mybatis-muliti-update.html</guid>
        
        <category>mybatis</category>
        
        
        <category>dev</category>
        
      </item>
    
      <item>
        <title>Crontab 크론탭 시작/중지/재시작</title>
        <description>&lt;p&gt;크론탭 시작&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service crond start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;크론탭 중지&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service crond stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;크론탭 재시작&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service crond restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;크론탭 설치여부 확인(피드백이 있다면 설치되어있는거임.)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -ef | grep cron
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Fri, 02 Nov 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2018/11/02/crontab-restart-start-stop.html</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2018/11/02/crontab-restart-start-stop.html</guid>
        
        <category>crontab</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>AWS read replica 생성</title>
        <description>&lt;h2 id=&quot;aws-read-replica-생성&quot;&gt;AWS read replica 생성&lt;/h2&gt;

&lt;h1 id=&quot;aws-read-replica&quot;&gt;AWS read replica&lt;/h1&gt;
&lt;p&gt;이렇게 한 이유는 디비 이중화를 하기위해서 이렇게 했다
read replica 옵션은 AWS RDS Aurora만 되는 걸로 알고 있지만 자세한건 공식 문서로
https://aws.amazon.com/ko/rds/details/read-replicas/&lt;/p&gt;

&lt;h3 id=&quot;1디비-클릭한후-인스턴스-작업을-클릭후에-리전-간-읽기-전용-복제본-만들기-클릭&quot;&gt;1.디비 클릭한후 인스턴스 작업을 클릭후에 리전 간 읽기 전용 복제본 만들기 클릭&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/09/aws-read-replica/aws-read-replica-01.png&quot; alt=&quot;AWS_read_replica_1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/09/aws-read-replica/aws-read-replica-02.png&quot; alt=&quot;AWS_read_replica_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/09/aws-read-replica/aws-read-replica-03.png&quot; alt=&quot;AWS_read_replica_3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2복제본-생성버튼-클릭&quot;&gt;2.복제본 생성버튼 클릭&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/09/aws-read-replica/aws-read-replica-04.png&quot; alt=&quot;AWS_read_replica_4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;마무리를~&lt;/p&gt;

&lt;p&gt;여기에서 더붙이면 Route53에 디비 퍼블릭엑세스 주소를 연결해놓으면 나름 2차도메인으로 써서
더욱 관리하기가 쉽다&lt;/p&gt;

&lt;p&gt;추후에 개발했을때 문제는
쓰기 디비에서 insert,update,delete후에 바로 읽기디비에서는 잘갱신이 안되는듯한 바로 먼가
설정이 있는데 찾으면 다시 포스팅을 하겠다~&lt;/p&gt;
</description>
        <pubDate>Sun, 08 Jul 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/aws/2018/07/08/aws-read-replica.html</link>
        <guid isPermaLink="true">http://localhost:4000/aws/2018/07/08/aws-read-replica.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>NGINX bind() to 0.0.0.80 failed 일때</title>
        <description>&lt;h2 id=&quot;nginx-bind-to-00080-failed-일때-처리&quot;&gt;NGINX bind() to 0.0.0.80 failed 일때 처리!?&lt;/h2&gt;

&lt;p&gt;nginx restart 할려고 했구만 이렇게 되서 -ㅅ-..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/02/2018-07-02-nginx-to-0-0-0-80-failed-01.png&quot; alt=&quot;GRADLE-WRAPPER1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo fuser -k 80/tcp


sudo service nginx restart

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/02/2018-07-02-nginx-to-0-0-0-80-failed-02.png&quot; alt=&quot;GRADLE-WRAPPER1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;netstat -nlp 로 포트를 확인하면&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/02/2018-07-02-nginx-to-0-0-0-80-failed-03.png&quot; alt=&quot;GRADLE-WRAPPER1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;제대로 돌고 있는거 확인&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2018/07/02/nginx-to-0-0-0-80-failed.html</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2018/07/02/nginx-to-0-0-0-80-failed.html</guid>
        
        <category>dev</category>
        
        <category>nginx</category>
        
        
        <category>devops</category>
        
      </item>
    
      <item>
        <title>NGINX에 ELB 체크 하는 방법</title>
        <description>&lt;p&gt;vi /etc/nginx/nginx.conf 로가서 추가를 해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location /elb-status {
        access_log off;
        return 200 'A-OK!';
        add_header Content-Type text/plain;
    }


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo service nginx start

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;aws-elb-상태검사&quot;&gt;AWS ELB 상태검사&lt;/h1&gt;

&lt;p&gt;AWS EC2 -&amp;gt; 로드 밸런서 -&amp;gt; 해당 로드밸런서 클릭후 하단탭에 상태검사 클릭&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/07/02/aws-nginx-elb-health-check/1.png&quot; alt=&quot;AWS ELB 상태검사&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 02 Jul 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/aws/2018/07/02/aws-nginx-elb-health-check.html</link>
        <guid isPermaLink="true">http://localhost:4000/aws/2018/07/02/aws-nginx-elb-health-check.html</guid>
        
        <category>aws</category>
        
        <category>nginx</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>멜팅콘 컨퍼런스 후기</title>
        <description>&lt;h1 id=&quot;멜팅콘-컨퍼런스-후기&quot;&gt;멜팅콘 컨퍼런스 후기&lt;/h1&gt;

&lt;h2 id=&quot;1keynote-노량진-스타일로-알려주는-build-컨퍼런스-2018-핵심-요약&quot;&gt;1.(Keynote) 노량진 스타일로 알려주는 Build 컨퍼런스 2018 핵심 요약&lt;/h2&gt;

&lt;p&gt;1.Microsoft Build&lt;/p&gt;

&lt;p&gt;Opportunity &amp;amp; Responsibiliy&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;코딩은 책임 &amp;amp; 기회&lt;/li&gt;
  &lt;li&gt;윤리의식을 가지자&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Azure AI 이미지인식&lt;/p&gt;

&lt;p&gt;커스텀비전 API 내가가지고 있는 데이터가지고 학습을 시킨다&lt;/p&gt;

&lt;p&gt;생각보다 쉽게 쓸수 있는 API들이 많음&lt;/p&gt;

&lt;p&gt;키넥트&lt;/p&gt;

&lt;p&gt;코타나 &amp;amp; 알렉사&lt;/p&gt;

&lt;p&gt;대화형 디바이스&lt;/p&gt;

&lt;p&gt;MS도 모바일 First 추구&lt;/p&gt;

&lt;p&gt;Github - App Center&lt;/p&gt;

&lt;p&gt;AI는 윤리적이어야 한다 MS회장&lt;/p&gt;

&lt;h2 id=&quot;2facebook-vs-google&quot;&gt;2.Facebook vs Google&lt;/h2&gt;

&lt;p&gt;유투브 키노트 하이라이트&lt;/p&gt;

&lt;p&gt;구글 IO는 큰텐트에서 한다고함&lt;/p&gt;

&lt;p&gt;등록관련 특이사항 
Facebook F8&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;F8 페이스북 사내 해커톤이 8시간정도해서 그렇게 해서 이름됬다고함&lt;/li&gt;
  &lt;li&gt;글로벌 네트워킹하기엔 좋다고 함&lt;/li&gt;
  &lt;li&gt;Dev Circle 가입&lt;/li&gt;
  &lt;li&gt;페스티벌룸 페이스북의 신기술 시연&lt;/li&gt;
  &lt;li&gt;메신저 관련 기능 시연 (+AR)&lt;/li&gt;
  &lt;li&gt;개발 API나 기능들에 대한 설명하는 곳&lt;/li&gt;
  &lt;li&gt;Facebook VR Platform인 Facebook Space(리얼 심즈라고 함)&lt;/li&gt;
  &lt;li&gt;세션예약이 불가능&lt;/li&gt;
  &lt;li&gt;세션 시간이 균일하지 않음&lt;/li&gt;
  &lt;li&gt;밥은 괜찮은편&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구글 I/O&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;구글 파트너들은 별도의 티켓존재 (유료)&lt;/li&gt;
  &lt;li&gt;GDG -&amp;gt; Google Develop Group 매니저 추천이 별로도 존재&lt;/li&gt;
  &lt;li&gt;여성우대 할인 티켓이 별도로 존재(유료)&lt;/li&gt;
  &lt;li&gt;행사 기간 3일&lt;/li&gt;
  &lt;li&gt;세션 시작시간 8시반부터 시작 너무 힘들었다&lt;/li&gt;
  &lt;li&gt;참석인원 7000명&lt;/li&gt;
  &lt;li&gt;식사는 샌드위치&lt;/li&gt;
  &lt;li&gt;세션은 7개 동시에 지정&lt;/li&gt;
  &lt;li&gt;Code Labs(신기술 튜토리얼)&lt;/li&gt;
  &lt;li&gt;노트북 들고가면 입장이 빠름&lt;/li&gt;
  &lt;li&gt;구글러의 코드리뷰&lt;/li&gt;
  &lt;li&gt;체험존이 많다&lt;/li&gt;
  &lt;li&gt;Google IO Zero day Google IO 전날 Intel과 Netfilx에서 행사를    하며 묻어감 , 경품도 줌&lt;/li&gt;
  &lt;li&gt;셔틀이 잘되어 있음&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Facebok : Social로 시작 
Google : Search로 시작&lt;/p&gt;

&lt;p&gt;F8 키노트 하이라이트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;청문회 이후 공격적인 저커버그&lt;/li&gt;
  &lt;li&gt;Watch Party&lt;/li&gt;
  &lt;li&gt;Dating 진출&lt;/li&gt;
  &lt;li&gt;마켓 플레이스 의외로 성업&lt;/li&gt;
  &lt;li&gt;Instagram Explorer 추가&lt;/li&gt;
  &lt;li&gt;AR Camera, Video Chat을 하나 만들어서 3개의 플랫폼에서&lt;/li&gt;
  &lt;li&gt;와츠앱도 이제 비지니스 플랫폼이라고 주장&lt;/li&gt;
  &lt;li&gt;메신저의 약진 페이스북의 차세대 플랫폼?&lt;/li&gt;
  &lt;li&gt;오큘러스 VR&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google IO 하이라이트&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;머신러닝에 의한 자동완성 기능 성숙&lt;/li&gt;
  &lt;li&gt;모스코드 입력치 자동완성으로 일반 대화급 타이핑&lt;/li&gt;
  &lt;li&gt;문장을 제안하는 gmail&lt;/li&gt;
  &lt;li&gt;어시스턴트의 약진&lt;/li&gt;
  &lt;li&gt;사람하고 통화하며 예약 가능&lt;/li&gt;
  &lt;li&gt;연동 시스템을 통한 예약,구매 가능&lt;/li&gt;
  &lt;li&gt;머신러닝이 적용되어 제안과 보정을 해주는 구글포토&lt;/li&gt;
  &lt;li&gt;보다 자연스러워진 TTS&lt;/li&gt;
  &lt;li&gt;어디서 본듯한 구글뉴스&lt;/li&gt;
  &lt;li&gt;안드로이드P 배터리관리와 다음 사용할 앱을 예측하는&lt;/li&gt;
  &lt;li&gt;카메라와 AR이 추가된 구글맵&lt;/li&gt;
  &lt;li&gt;텍스트와 패션을 업은 구글렌즈&lt;/li&gt;
  &lt;li&gt;취향분석해서 추천기능이 들어간 구글맵&lt;/li&gt;
  &lt;li&gt;개선된 TPU&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;F8소감&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;돈되는 데이팅에 진출 데이팅 앱의 특성을 이해&lt;/li&gt;
  &lt;li&gt;차세대 플랫폼은 VR&lt;/li&gt;
  &lt;li&gt;메신저 챗봇과 결제 플랫폼을 변화중&lt;/li&gt;
  &lt;li&gt;돈 될만한걸 다 추가하기 시작했다&lt;/li&gt;
  &lt;li&gt;Snow 유사품,Instagram의 Group video call,Whatsapp의 Group call&lt;/li&gt;
  &lt;li&gt;청문회를 다소 신경쓴 듯한 분위기다&lt;/li&gt;
  &lt;li&gt;기술이 아니라 플랫폼 회사다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;구글 I/O 소감&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;정말 많은 것을 한다&lt;/li&gt;
  &lt;li&gt;머신러닝,TPU 개발,웹 개선 ..&lt;/li&gt;
  &lt;li&gt;머신러닝에 많은 역량을 집중&lt;/li&gt;
  &lt;li&gt;안드로이드 세션 정말 많다 .. Jetpack&lt;/li&gt;
  &lt;li&gt;광고세션이 비중이 낮음&lt;/li&gt;
  &lt;li&gt;굿바이 데이드림,지못미 Analytics&lt;/li&gt;
  &lt;li&gt;Waymo와 Nest 보여줌&lt;/li&gt;
  &lt;li&gt;구글은 기술회사다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3리액트를-사용하기-가장-쉬운방법-nextjs&quot;&gt;3.리액트를 사용하기 가장 쉬운방법 Next.js&lt;/h2&gt;
&lt;p&gt;Seoul.js&lt;/p&gt;

&lt;p&gt;https://nextjs.org/learn&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Index.getInitialProps = async() = {


}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;앱 배포하기 
now&lt;/p&gt;

&lt;p&gt;배포 자체를 커밋으로 봄&lt;/p&gt;

&lt;p&gt;커스텀 다큐먼트/앱&lt;/p&gt;

&lt;p&gt;next 플러그인 
https://github.com/zeit/next-plugins&lt;/p&gt;

&lt;p&gt;구글 workbox
https://developers.google.com/web/tools/workbox/&lt;/p&gt;

&lt;p&gt;CODEBUSKING&lt;/p&gt;

&lt;p&gt;https://www.youtube.com/channel/UCrKE8ihOKHxYHBzI0Ys-Oow&lt;/p&gt;

&lt;p&gt;인스턴스 3개까지는 무료&lt;/p&gt;

</description>
        <pubDate>Sat, 26 May 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/seminar/2018/05/26/MeltingCon-2018.html</link>
        <guid isPermaLink="true">http://localhost:4000/seminar/2018/05/26/MeltingCon-2018.html</guid>
        
        <category>seminar</category>
        
        
        <category>seminar</category>
        
      </item>
    
      <item>
        <title>AWS CodeStar 구축</title>
        <description>&lt;h2 id=&quot;codestar-구축&quot;&gt;CodeStar 구축&lt;/h2&gt;

&lt;p&gt;1.CodeStar 프로젝트이름을 적는다&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;s3버킷도 비슷한 이름으로 생성되니 중복되어있는게 없는지 생각하고 만든다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting01.png&quot; alt=&quot;CODESTAR 연동1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.프로젝트 세부정보 codestar는 이렇게 된다라는것을 보여주는듯&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting02.png&quot; alt=&quot;CODESTAR 연동2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.EC2 키페어 셋팅을 해줘야함&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting03.png&quot; alt=&quot;CODESTAR 연동3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.코드 편집용 툴 선택하는듯 난 건너뛰기를 함
&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting04.png&quot; alt=&quot;CODESTAR 연동4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.CodeCommit 연동용&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;하기전에 AWS IAM 사용자 git https권한을 줘야한다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting05.png&quot; alt=&quot;CODESTAR 연동5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting06.png&quot; alt=&quot;CODESTAR 연동6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.AWSCLI 설치 (MAC기준)&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;awscli를 설치를 해줘야한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ pip install awscli --upgrade --user
$ was -- version 
(command not found나오면 구글링,mac이면 homebrew로 설치로 일단 해결함)

$ brew install awscli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;awscli 설정
우선 AWS IAM 로 가서 ‘NEW User’로 User를 하나 생성하고, Add permissions로 
‘AWSCodeCommitFullAccess’ 권한을 부여하고,AWS Access Key ID와 Secret Access Key를
잘 적어두었다가 아래에서 처럼 활용&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting07.png&quot; alt=&quot;CODESTAR 연동7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;터미널창에서&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git config --global credential.helper '!aws code commit credential-helper $@'

$ git config --global credential.UseHttpPath true
$ git clone 주소 

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;git clone를 하고 Intellj에서 gradle 방식으로 import를 한후 
pom.xml -&amp;gt; build.gradle로 변환&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 프로젝트 폴더 (pom.xml이 있는곳) 으로 이동
gradle init --type pom
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/imgs/2018/04/10/awscodestar-setting/awscodestar-setting08.png&quot; alt=&quot;CODESTAR 연동8&quot; /&gt;&lt;/p&gt;

&lt;p&gt;내용이 많아서… 집에가서 마저 적어야지 ㅋㅋ;;&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Apr 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/aws/2018/04/10/awscodestar-setting.html</link>
        <guid isPermaLink="true">http://localhost:4000/aws/2018/04/10/awscodestar-setting.html</guid>
        
        <category>aws</category>
        
        
        <category>aws</category>
        
      </item>
    
      <item>
        <title>EC2 TimeZone 변경</title>
        <description>&lt;h2 id=&quot;1timezone-&quot;&gt;1.TimeZone ?&lt;/h2&gt;

&lt;p&gt;리눅스를 새로 설치하고 나면 (AWS EC2 AMI도 Linux와 동일) 시간대(Timezone)을 맞추지 않으면, 리눅스의 date가 미국 태평양 시간인 PST로 표시됩니다. 즉 캘리포니아 현지 시간으로 표시됩니다. 이럴경우 한국 표준시인 KST로 변경해주어야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;2-ec2-터미널에서-timezone-변경&quot;&gt;2. EC2 터미널에서 TimeZone 변경&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[ec2-user@ip-172-31-7-180 ~]$ date
Fri Aug  8 06:41:49 UTC 2014

[ec2-user@ip-172-31-7-180 ~]$ sudo date
Fri Aug  8 06:42:01 UTC 2014

[ec2-user@ip-172-31-7-180 ~]$ sudo cat /etc/localtime
TZif2UTCTZif2UTC
UTC0

[ec2-user@ip-172-31-7-180 ~]$ sudo rm /etc/localtime
[ec2-user@ip-172-31-7-180 ~]$ sudo ln -s /usr/share/zoneinfo/Asia/Seoul /etc/localtime

[ec2-user@ip-172-31-7-180 ~]$ date
Fri Aug  8 15:48:27 KST 2014

[ec2-user@ip-172-31-7-180 ~]$ sudo date
Fri Aug  8 15:48:40 KST 2014


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 30 Mar 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/aws/2018/03/30/aws-ec2-timezone.html</link>
        <guid isPermaLink="true">http://localhost:4000/aws/2018/03/30/aws-ec2-timezone.html</guid>
        
        <category>aws</category>
        
        <category>ec2</category>
        
        
        <category>aws</category>
        
      </item>
    
  </channel>
</rss>
